SET SERVEROUTPUT ON;
SET SERVEROUTPUT OFF;
BEGIN
    DBMS_OUTPUT.PUT_LINE('HELLO WORLD');
    DBMS_OUTPUT.PUT_LINE('HELLO WORLD2');
    DBMS_OUTPUT.PUT_LINE();
END;
/
-- DECLARE 시작 END하고 /로 끝남

-- <타입 변수 선언>
-- 변수의 선언과 초기화, 변수 값 출력
DECLARE
    EMP_ID NUMBER; --변수명(띄우고)자료형; (컬럼명이 아님?!)
    EMP_NAME VARCHAR2(30); --변수명(띄우고)자료형(길이);
BEGIN
    EMP_ID :=888;
    EMP_NAME := '배장남'; 
    DBMS_OUTPUT.PUT_LINE('EMP_ID : ' || EMP_ID); --연결연산자(||)
    DBMS_OUTPUT.PUT_LINE('EMP_NAME : ' || EMP_NAME);
END;
/

-- 레퍼런스 변수의 선언과 초기화, 변수 값 출력
DECLARE 
    EMP_ID EMPLOYEE.EMP_ID%TYPE;
    EMP_NAME EMPLOYEE.EMP_NAME%TYPE;
BEGIN
    SELECT EMP_ID, EMP_NAME
    INTO EMP_ID, EMP_NAME
    FROM EMPLOYEE
    WHERE EMP_ID = '&EMP_ID';
    DBMS_OUTPUT.PUT_LINE('EMP_ID : ' || EMP_ID);
    DBMS_OUTPUT.PUT_LINE('EMP_NAME : ' || EMP_NAME);
END;
/

DECLARE
--    DNO DEPT.DEPTNO%TYPE;
--    DNM DEPT.DEPTNAME%TYPE;
--    DLOC DEPT.LOC%TYPE;
BEGIN
    INSERT INTO DEPT VALUES('&DEPTNO값을 넣어주세요', '&부서명', '&지역');
END;
/

-- 한 행에 대한 ROWTYPE변수의 선언과 초기화, 값 출력
DECLARE
    E EMPLOYEE%ROWTYPE;
BEGIN
    SELECT * INTO E
    FROM EMPLOYEE
    WHERE EMP_ID = '&EMP_ID';
    DBMS_OUTPUT.PUT_LINE('EMP_ID : '|| E.EMP_ID);
    DBMS_OUTPUT.PUT_LINE('EMP_NAME : '|| E.EMP_NAME);
    DBMS_OUTPUT.PUT_LINE('EMP_NO : '|| E.EMP_NO);
    DBMS_OUTPUT.PUT_LINE('SALARY : '|| E.SALARY);
END;
/

-- IF ~ THEN ~ END IF
DECLARE
    EMP_ID EMPLOYEE.EMP_ID%TYPE;
    EMP_NAME EMPLOYEE.EMP_NAME%TYPE;
    SALARY EMPLOYEE.SALARY%TYPE;
    BONUS EMPLOYEE.BONUS%TYPE;
BEGIN
    SELECT EMP_ID, EMP_NAME, SALARY, NVL(BONUS, 0)
    INTO EMP_ID, EMP_NAME, SALARY, BONUS
    FROM EMPLOYEE
    WHERE EMP_ID = '&EMP_ID';
    DBMS_OUTPUT.PUT_LINE('사번 : ' || EMP_ID);
    DBMS_OUTPUT.PUT_LINE('이름 : ' || EMP_NAME);
    DBMS_OUTPUT.PUT_LINE('급여 : ' || SALARY);
    IF(BONUS = 0)   
        THEN DBMS_OUTPUT.PUT_LINE('보너스를 지급 받지 않는 사원입니다.');
    END IF;
    DBMS_OUTPUT.PUT_LINE('보너스율 : ' || BONUS * 100 || '%');
END;
/

-- 자원번호를 전달받아서 이름, 급여, 업무를 반환함.
CREATE OR REPLACE PROCEDURE PRO_EMP_ARG_TEST
    ( ARG_EMPNO IN EMP.EMPNO%TYPE
    , ARG_ENAME OUT EMP.EMP.ENAME%TYPE
    , ARG_SAL OUT EMP.SAL%TYPE
    , ARG_JOB OUT EMP.JOB%TYPE  )
IS
BEGIN
    DBMS_OUT.PUT_LINE('ARG_EMPNO: '|| ARG_EMPNO);
    SELECT ENAME, SAL, JOB
    INTO ARG_ENAME, ARG_SAL, ARG_JOB
    FROM EMP
    WHERE EMPNO = ARG_EMPNO;
    
    DBMS_OUT.PUT_LINE('ARG_ENAME: '|| ARG_ENAME);
END;
/
-- 바인드 변수 선언
VARIABLE VAR_ENAME VARCHAR2(30);
VARIABLE VAR_SAL VARCHAR2(30);
VARIABLE VAR_JOB VARCHAR2(30);
-- PROCEDURE 실행
EXEC PRO_EMP_ARG_TEST(7902, :VAR_EBANE, :VAR_SAL, :VAR_JOB );

PRINT VAR_ENAME;
PRINT VAR_SAL;
PRINT VAR_JOB;

-- Procedure SELECT_EMPID이(가) 컴파일되었습니다.
CREATE OR REPLACE PROCEDURE SELECT_EMPID
    ( ARG_EMP_ID IN EMPLOYEE.EMP_ID%TYPE
    , ARG_EMP_NAME OUT EMPLOYEE.EMP_NAME%TYPE
    , ARG_SALARY OUT EMPLOYEE.SALARY%TYPE
    , ARG_BONUS OUT EMPLOYEE.BONUS%TYPE  )
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('ARG_EMP_ID: '|| ARG_EMP_ID);
    SELECT EMP_NAME, SALARY, BONUS
    INTO ARG_EMP_NAME, ARG_SALARY, ARG_BONUS
    FROM EMPLOYEE
    WHERE EMP_ID = ARG_EMP_ID;    
END;
/
-- Procedure PRO_ALL_EMP이(가) 컴파일되었습니다.
CREATE OR REPLACE PROCEDURE PRO_ALL_EMP
IS
BEGIN
    FOR E IN (SELECT * FROM EMPLOYEE) LOOP
--       DBMS_OUPUT.PUT_LINE(E.EMP_NAME); 
         SELECT_EMPID(E.EMP_ID, E.EMP_NAME, E.SALARY, E.BONUS);
    END LOOP;
END;
/
-- PL/SQL 프로시저가 성공적으로 완료되었습니다.
EXEC PRO_ALL_EMP;

-- PPT PL/SQL 다시 풀기
-- 프로시저를 사용하여 출력하는 내용을 화면에 보여주도록 설정하는 환경변수 (기본값 OFF)
SET SERVEROUTPUT ON;

BEGIN
    DBMS_OUTPUT.PUT_LINE('HELLO WORLD');
END;
/
-- DBMS_OUTPUT안에 속해 있는 PUT_LINE이라는 프로시저를 통해 출력한다
-- KH 서버로 접속하면 DBMS 출력창에 'HELLO WORD'라고 적힌다.

-- 변수의 선언과 초기화, 변수 값 출력
DECLARE 
    -- 변수 선언
    EMP_ID NUMBER; --변수명이랑 자료형
    EMP_NAME VARCHAR2(30);
BEGIN
    -- 변수 초기화 :=(지정연산자), 일반적인 언어에서 '='와 같다.
    EMP_ID :=888;
    EMP_NAME := '배장남';
    DBMS_OUTPUT.PUT_LINE('EMP_ID : ' || EMP_ID);
    DBMS_OUTPUT.PUT_LINE('EMP_NAME : ' || EMP_NAME);
END; --그러면 DBMS에 888이랑 배장남이 출력된다.
/
-------------------------------------------------------
-- 구구단 
-- 정수를 입력받아서 해당 구구단을 출력하는 프로그램을 작성하시오
ACCEPT pno PROMPT '몇단?'
DECLARE
  vno NUMBER:=&pno;
BEGIN
    FOR i IN 1..9 LOOP
      DBMS_OUTPUT.PUT_LINE(vno||'*'||i||'='||vno*i);
    END LOOP;
END;
/

-- 반복문 (LOOP문, WHILE문, FOR문)


-- FOR LOOP
-- 1~5까지 숫자 출력하기
BEGIN 
    FOR N IN 1..5 
    LOOP
        DBMS_OUTPUT.PUT_LINE(N);
        END LOOP;
END;
/
-- 5~10까지 숫자 출력하기
BEGIN 
    FOR J IN 5..10
    LOOP
        DBMS_OUTPUT.PUT_LINE(J);
        END LOOP;
END;
/
-- 5~1까지 숫자 출력하기(REVERSE 사용)
BEGIN 
    FOR N IN REVERSE 1..5 
    LOOP
        DBMS_OUTPUT.PUT_LINE(N);
        END LOOP;
END;
/
        
-- IF ~ THEN ~ END IF
-- IF ~ THEN ~ ELSE ~ END IF
-- IF ~ THEN ~ ELSIF ~ ELSE ~ END IF

-- 반복문 
-- LOOP, FOR LOOP, WHILE LOOP

-- <TRIGGER>
-- 테이블이나 뷰가 INSERT, UPDATE, DELETE 등의 DML문에 의해 변결될
    --경우 자동으로 실행될 내용을 정의하여 저장
CREATE OR REPLACE TRIGGER TRG_01
AFTER INSERT
ON EMPLOYEE
BEGIN
    DBMS_OUTPUT.PUT_LINE('신입사원이 입사했습니다.');
END;
/
INSERT INTO EMPLOYEE VALUES(905, '길성춘', '690512-1151432',
                            'gil_sj@kh.or.kr', '01035464455', 'D5', 'J3',
                            'S5', 3000000, 0.1, 200, SYSDATE, NULL,
                            DEFAULT);

CREATE TABLE PRODUCT(

PCODE NUMBER PRIMARY KEY,
PNAME VARCHAR2(30),
BRAND VARCHAR2(30),
PRICE NUMBER,
STOCK NUMBER DEFAULT 0

);
CREATE TABLE PRO_DETAIL(

DCODE NUMBER PRIMARY KEY,
PCODE NUMBER,
PDATE DATE,
AMOUNT NUMBER,
STATUS VARCHAR2(10) CHECK (STATUS IN ('입고', '출고')),
FOREIGN KEY (PCODE) REFERENCES PRODUCT(PCODE)

);

CREATE SEQUENCE SEQ_PCODE;
CREATE SEQUENCE SEQ_DCODE;

INSERT INTO PRODUCT
VALUES(SEQ_PCODE.NEXTVAL, '갤럭스노트8', '삼송', 900000, DEFAULT);
INSERT INTO PRODUCT
VALUES(SEQ_PCODE.NEXTVAL, '아이뽀8', '사과', 1000000, DEFAULT);
INSERT INTO PRODUCT
VALUES(SEQ_PCODE.NEXTVAL, '대륙폰', '샤우미', 600000, DEFAULT);

-- 예시1
CREATE OR REPLACE TRIGGER TGR_02 --트리거명
AFTER INSERT ON PRO_DETAIL --테이블명
    --INSERT는 한번밖에 실행안되는데 여기서는 3번?실행됨?)
    FOR EACH ROW
        BEGIN
            IF :NEW.STATUS = '입고'
            THEN
                UPDATE PRODUCT SET STOCK = STOCK + :NEW.AMOUNT
                -- UPDATE는 하나만 UPPDATE 되는게 아니다/
                WHERE PCODE = :NEW.PCODE;
            END IF;
            
            IF :NEW.STATUS = '출고'
            THEN 
                UPDATE PRODUCT SET STOCK = STOCK - :NEW.AMOUNT
                WHERE PCODE = :NEW.PCODE;
            END IF;
END;
/

INSERT INTO PRO_DETAIL VALUES (SEQ_DCODE.NEXTVAL,1, SYSDATE, 5, '입고');
INSERT INTO PRO_DETAIL VALUES (SEQ_DCODE.NEXTVAL,2, SYSDATE, 10, '입고');
INSERT INTO PRO_DETAIL VALUES (SEQ_DCODE.NEXTVAL,3, SYSDATE, 20, '입고');
INSERT INTO PRO_DETAIL VALUES (SEQ_DCODE.NEXTVAL,1, SYSDATE, 1, '출고');
INSERT INTO PRO_DETAIL VALUES (SEQ_DCODE.NEXTVAL,2, SYSDATE, 7, '출고');
INSERT INTO PRO_DETAIL VALUES (SEQ_DCODE.NEXTVAL,3, SYSDATE, 11, '출고');















